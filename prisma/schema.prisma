generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  hashedPassword String?
  gmailEmail    String?   @unique
  gmailPassword String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  progress      CourseProgress[]
  transactions  CourseTransaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  videoUrl    String
  duration    Int      // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enrollments Enrollment[]
  progress    CourseProgress[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  enrolledAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model CourseProgress {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Float    @default(0) // percentage of completion
  lastWatched DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model CourseTransaction {
  id              String   @id @default(cuid())
  userId          String
  courseTitle     String   // Store title directly for easier retrieval
  walletAddress   String
  transactionHash String   // Ethereum transaction hash
  purchaseDate    DateTime @default(now())
  price           Float    @default(0.03) // Price in ETH
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseTitle])
  @@index([walletAddress])
} 